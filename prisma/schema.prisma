generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  role_id   Int    @id @default(autoincrement())
  role_name String @db.VarChar(50)

  users User[]
}

model User {
  user_id   String @id
  email     String @unique @db.VarChar(255)
  nom       String @db.VarChar(100)
  prenom    String @db.VarChar(100)
  telephone String @db.VarChar(50)
  role_id   Int

  role        Role         @relation(fields: [role_id], references: [role_id], onDelete: Restrict)
  formateur   Formateur?
  participant Participant?
}

model Formateur {
  user_id    String  @id
  cv_path    String? @db.VarChar(255)
  badge_path String? @db.VarChar(255)

  user    User                       @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  actions ActionFormationFormateur[]
  seances Seance[]
}

model Participant {
  user_id    String @id
  entreprise String @db.VarChar(100)
  poste      String @db.VarChar(100)

  user         User                         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  actions      ActionFormationParticipant[]
  attestations Attestation[]
}

model Domaine {
  domaine_id      Int    @id @default(autoincrement())
  libelle_domaine String @db.VarChar(100)

  themes Theme[]
}

model Theme {
  theme_id      Int    @id @default(autoincrement())
  libelle_theme String @db.VarChar(100)
  domaine_id    Int

  domaine Domaine           @relation(fields: [domaine_id], references: [domaine_id], onDelete: Restrict)
  actions ActionFormation[]
}

model ActionFormation {
  action_id             Int       @id @default(autoincrement())
  type_action           String   @db.VarChar(50)
  date_debut            DateTime
  date_fin              DateTime
  duree_jours           Int?
  duree_heures          Int?
  nb_seances            Int?
  lieu                  String   @db.VarChar(100)
  nb_participants_prevu Int?
  theme_id              Int

  theme        Theme                        @relation(fields: [theme_id], references: [theme_id], onDelete: Restrict)
  formateurs   ActionFormationFormateur[]
  participants ActionFormationParticipant[]
  attestations Attestation[]
  seances      Seance[]
}

model Seance {
  senace_id    Int          @id @default(autoincrement())
  date         DateTime?
  heure        String?      @db.VarChar(50)
  duree_heures Int?
  statut       SeanceStatut @default(EN_ATTENTE)
  action_id    Int
  formateur_id String

  action    ActionFormation @relation(fields: [senace_id], references: [action_id], onDelete: Cascade)
  formateur Formateur       @relation(fields: [formateur_id], references: [user_id], onDelete: Cascade)
}

model ActionFormationFormateur {
  action_id    Int
  formateur_id String

  action    ActionFormation @relation(fields: [action_id], references: [action_id], onDelete: Cascade)
  formateur Formateur       @relation(fields: [formateur_id], references: [user_id], onDelete: Cascade)

  @@id([action_id, formateur_id])
}

model ActionFormationParticipant {
  action_id        Int
  participant_id   String
  date_inscription DateTime?
  statut           String?   @db.VarChar(50)

  action      ActionFormation @relation(fields: [action_id], references: [action_id], onDelete: Cascade)
  participant Participant     @relation(fields: [participant_id], references: [user_id], onDelete: Cascade)

  @@id([action_id, participant_id])
}

model Attestation {
  attestation_id Int       @id @default(autoincrement())
  participant_id String
  action_id      Int
  date_emission  DateTime?
  qr_code_ref    String?   @unique @db.VarChar(255)

  participant Participant     @relation(fields: [participant_id], references: [user_id], onDelete: Cascade)
  action      ActionFormation @relation(fields: [action_id], references: [action_id], onDelete: Cascade)
}

enum SeanceStatut {
  EN_ATTENTE
  EN_COURS
  TERMINEE
  ANNULEE
}
